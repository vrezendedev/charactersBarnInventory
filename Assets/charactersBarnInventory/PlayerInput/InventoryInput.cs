//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/charactersBarnInventory/PlayerInput/InventoryInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InventoryInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InventoryInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InventoryInput"",
    ""maps"": [
        {
            ""name"": ""InventoryMap"",
            ""id"": ""61ca954d-db4b-4499-bb0a-e16487cd7489"",
            ""actions"": [
                {
                    ""name"": ""OpenAndClose"",
                    ""type"": ""Button"",
                    ""id"": ""67b80104-822d-4635-8b1c-3b696f737712"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bc57b325-e44b-4ef6-87d0-56e3a189355d"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenAndClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InventoryMap
        m_InventoryMap = asset.FindActionMap("InventoryMap", throwIfNotFound: true);
        m_InventoryMap_OpenAndClose = m_InventoryMap.FindAction("OpenAndClose", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InventoryMap
    private readonly InputActionMap m_InventoryMap;
    private List<IInventoryMapActions> m_InventoryMapActionsCallbackInterfaces = new List<IInventoryMapActions>();
    private readonly InputAction m_InventoryMap_OpenAndClose;
    public struct InventoryMapActions
    {
        private @InventoryInput m_Wrapper;
        public InventoryMapActions(@InventoryInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenAndClose => m_Wrapper.m_InventoryMap_OpenAndClose;
        public InputActionMap Get() { return m_Wrapper.m_InventoryMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryMapActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryMapActionsCallbackInterfaces.Add(instance);
            @OpenAndClose.started += instance.OnOpenAndClose;
            @OpenAndClose.performed += instance.OnOpenAndClose;
            @OpenAndClose.canceled += instance.OnOpenAndClose;
        }

        private void UnregisterCallbacks(IInventoryMapActions instance)
        {
            @OpenAndClose.started -= instance.OnOpenAndClose;
            @OpenAndClose.performed -= instance.OnOpenAndClose;
            @OpenAndClose.canceled -= instance.OnOpenAndClose;
        }

        public void RemoveCallbacks(IInventoryMapActions instance)
        {
            if (m_Wrapper.m_InventoryMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryMapActions @InventoryMap => new InventoryMapActions(this);
    public interface IInventoryMapActions
    {
        void OnOpenAndClose(InputAction.CallbackContext context);
    }
}
